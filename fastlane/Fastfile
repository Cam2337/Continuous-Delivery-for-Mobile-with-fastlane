# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.41.0"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    
    carthage(
      command: options[:update] ? "update" : "bootstrap",
      platform: "iOS",
      use_binaries: false
    )
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  lane :gen_screenshots do
    snapshot
    frameit(white: true, path: './fastlane/screenshots')
  end

  lane :build do
    gym(scheme: "Fennec",
          output_name:"firefox.ipa",
          configuration: "development",
          export_method: "development",
          silent: false,
          output_directory: "./Export"
        )
  end
  lane :beta do
    register_devices(devices_file: "devices.txt")
    match(git_url: "git@bitbucket.org:doron_katz/my-fastlane-keys.git",
      type: "development",
      app_identifier: "com.doronkatz.firefox")
      gym(scheme: "Fennec",
        output_name:"firefox.ipa",
        configuration: "development",
        export_method: "development",
        silent: false,
        output_directory: "./Export"
      )
      scan
      testflight(
        username: "your@email.com",
        app_identifier: "com.doronkatz.firefox",
        beta_app_description: "This is a new build and should be dynamic, from prompt",
        beta_app_feedback_email: "feedback@firefoxapp.com",
        itc_provider: "abcde12345" # pass a specific value to the iTMSTransporter -itc_provider option
      )

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  lane :crashlytics do
    crashlytics(
      crashlytics_path: "./Pods/Crashlytics/", # path to your Crashlytics submit binary.
      api_token: "xxx",
      build_secret: "xxx",
      ipa_path: "./app.ipa"
    )
  end

  lane :release do
    # by default deliver will call precheck and warn you of any problems
    # if you want precheck to halt submitting to app review, you can pass
    # precheck_default_rule_level: :error
    deliver(precheck_default_rule_level: :error)
    snapshot
    produce(
      username: 'doronkatz@mac.com',
      app_identifier: 'com.doronkatz.firefox',
      app_name: 'Firefox for iOS',
      language: 'English',
      app_version: '1.0',
      team_name: 'Doron Katz' # only necessary when in multiple teams
    )
    deliver(
      submit_for_review: true,
      force: true,
      metadata_path: "./metadata"
    )
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics
